// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_array_ap_fixed_16_6_5_3_0_16u_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        data_stream_V_data_4_V_dout,
        data_stream_V_data_4_V_empty_n,
        data_stream_V_data_4_V_read,
        data_stream_V_data_5_V_dout,
        data_stream_V_data_5_V_empty_n,
        data_stream_V_data_5_V_read,
        data_stream_V_data_6_V_dout,
        data_stream_V_data_6_V_empty_n,
        data_stream_V_data_6_V_read,
        data_stream_V_data_7_V_dout,
        data_stream_V_data_7_V_empty_n,
        data_stream_V_data_7_V_read,
        data_stream_V_data_8_V_dout,
        data_stream_V_data_8_V_empty_n,
        data_stream_V_data_8_V_read,
        data_stream_V_data_9_V_dout,
        data_stream_V_data_9_V_empty_n,
        data_stream_V_data_9_V_read,
        data_stream_V_data_10_V_dout,
        data_stream_V_data_10_V_empty_n,
        data_stream_V_data_10_V_read,
        data_stream_V_data_11_V_dout,
        data_stream_V_data_11_V_empty_n,
        data_stream_V_data_11_V_read,
        data_stream_V_data_12_V_dout,
        data_stream_V_data_12_V_empty_n,
        data_stream_V_data_12_V_read,
        data_stream_V_data_13_V_dout,
        data_stream_V_data_13_V_empty_n,
        data_stream_V_data_13_V_read,
        data_stream_V_data_14_V_dout,
        data_stream_V_data_14_V_empty_n,
        data_stream_V_data_14_V_read,
        data_stream_V_data_15_V_dout,
        data_stream_V_data_15_V_empty_n,
        data_stream_V_data_15_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_state4 = 8'd4;
parameter    ap_ST_fsm_state5 = 8'd8;
parameter    ap_ST_fsm_state6 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [15:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [15:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [15:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
input  [15:0] data_stream_V_data_4_V_dout;
input   data_stream_V_data_4_V_empty_n;
output   data_stream_V_data_4_V_read;
input  [15:0] data_stream_V_data_5_V_dout;
input   data_stream_V_data_5_V_empty_n;
output   data_stream_V_data_5_V_read;
input  [15:0] data_stream_V_data_6_V_dout;
input   data_stream_V_data_6_V_empty_n;
output   data_stream_V_data_6_V_read;
input  [15:0] data_stream_V_data_7_V_dout;
input   data_stream_V_data_7_V_empty_n;
output   data_stream_V_data_7_V_read;
input  [15:0] data_stream_V_data_8_V_dout;
input   data_stream_V_data_8_V_empty_n;
output   data_stream_V_data_8_V_read;
input  [15:0] data_stream_V_data_9_V_dout;
input   data_stream_V_data_9_V_empty_n;
output   data_stream_V_data_9_V_read;
input  [15:0] data_stream_V_data_10_V_dout;
input   data_stream_V_data_10_V_empty_n;
output   data_stream_V_data_10_V_read;
input  [15:0] data_stream_V_data_11_V_dout;
input   data_stream_V_data_11_V_empty_n;
output   data_stream_V_data_11_V_read;
input  [15:0] data_stream_V_data_12_V_dout;
input   data_stream_V_data_12_V_empty_n;
output   data_stream_V_data_12_V_read;
input  [15:0] data_stream_V_data_13_V_dout;
input   data_stream_V_data_13_V_empty_n;
output   data_stream_V_data_13_V_read;
input  [15:0] data_stream_V_data_14_V_dout;
input   data_stream_V_data_14_V_empty_n;
output   data_stream_V_data_14_V_read;
input  [15:0] data_stream_V_data_15_V_dout;
input   data_stream_V_data_15_V_empty_n;
output   data_stream_V_data_15_V_read;
output  [15:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [15:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [15:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [15:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [15:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [15:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [15:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [15:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [15:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [15:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [15:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [15:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [15:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [15:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [15:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [15:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg data_stream_V_data_4_V_read;
reg data_stream_V_data_5_V_read;
reg data_stream_V_data_6_V_read;
reg data_stream_V_data_7_V_read;
reg data_stream_V_data_8_V_read;
reg data_stream_V_data_9_V_read;
reg data_stream_V_data_10_V_read;
reg data_stream_V_data_11_V_read;
reg data_stream_V_data_12_V_read;
reg data_stream_V_data_13_V_read;
reg data_stream_V_data_14_V_read;
reg data_stream_V_data_15_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    data_stream_V_data_4_V_blk_n;
reg    data_stream_V_data_5_V_blk_n;
reg    data_stream_V_data_6_V_blk_n;
reg    data_stream_V_data_7_V_blk_n;
reg    data_stream_V_data_8_V_blk_n;
reg    data_stream_V_data_9_V_blk_n;
reg    data_stream_V_data_10_V_blk_n;
reg    data_stream_V_data_11_V_blk_n;
reg    data_stream_V_data_12_V_blk_n;
reg    data_stream_V_data_13_V_blk_n;
reg    data_stream_V_data_14_V_blk_n;
reg    data_stream_V_data_15_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state9;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg    res_stream_V_data_12_V_blk_n;
reg    res_stream_V_data_13_V_blk_n;
reg    res_stream_V_data_14_V_blk_n;
reg    res_stream_V_data_15_V_blk_n;
reg   [4:0] i_in_0_reg_1636;
wire   [0:0] icmp_ln41_fu_1907_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op565;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_in_fu_1913_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] trunc_ln203_fu_1919_p1;
reg   [3:0] trunc_ln203_reg_5916;
wire    ap_CS_fsm_state4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_0;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_1;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_2;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_3;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_4;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_5;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_6;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_7;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_8;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_9;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_10;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_11;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_12;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_13;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_14;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_15;
reg   [15:0] data_240_V_fu_524;
reg   [15:0] data_241_V_fu_528;
reg   [15:0] data_242_V_fu_532;
reg   [15:0] data_243_V_fu_536;
reg   [15:0] data_244_V_fu_540;
reg   [15:0] data_245_V_fu_544;
reg   [15:0] data_246_V_fu_548;
reg   [15:0] data_247_V_fu_552;
reg   [15:0] data_248_V_fu_556;
reg   [15:0] data_249_V_fu_560;
reg   [15:0] data_250_V_fu_564;
reg   [15:0] data_251_V_fu_568;
reg   [15:0] data_252_V_fu_572;
reg   [15:0] data_253_V_fu_576;
reg   [15:0] data_254_V_fu_580;
reg   [15:0] data_255_V_fu_584;
reg   [15:0] data_240_V_1_fu_588;
reg   [15:0] data_241_V_1_fu_592;
reg   [15:0] data_242_V_1_fu_596;
reg   [15:0] data_243_V_1_fu_600;
reg   [15:0] data_244_V_1_fu_604;
reg   [15:0] data_245_V_1_fu_608;
reg   [15:0] data_246_V_1_fu_612;
reg   [15:0] data_247_V_1_fu_616;
reg   [15:0] data_248_V_1_fu_620;
reg   [15:0] data_249_V_1_fu_624;
reg   [15:0] data_250_V_1_fu_628;
reg   [15:0] data_251_V_1_fu_632;
reg   [15:0] data_252_V_1_fu_636;
reg   [15:0] data_253_V_1_fu_640;
reg   [15:0] data_254_V_1_fu_644;
reg   [15:0] data_255_V_1_fu_648;
reg   [15:0] data_240_V_2_fu_652;
reg   [15:0] data_241_V_2_fu_656;
reg   [15:0] data_242_V_2_fu_660;
reg   [15:0] data_243_V_2_fu_664;
reg   [15:0] data_244_V_2_fu_668;
reg   [15:0] data_245_V_2_fu_672;
reg   [15:0] data_246_V_2_fu_676;
reg   [15:0] data_247_V_2_fu_680;
reg   [15:0] data_248_V_2_fu_684;
reg   [15:0] data_249_V_2_fu_688;
reg   [15:0] data_250_V_2_fu_692;
reg   [15:0] data_251_V_2_fu_696;
reg   [15:0] data_252_V_2_fu_700;
reg   [15:0] data_253_V_2_fu_704;
reg   [15:0] data_254_V_2_fu_708;
reg   [15:0] data_255_V_2_fu_712;
reg   [15:0] data_240_V_3_fu_716;
reg   [15:0] data_241_V_3_fu_720;
reg   [15:0] data_242_V_3_fu_724;
reg   [15:0] data_243_V_3_fu_728;
reg   [15:0] data_244_V_3_fu_732;
reg   [15:0] data_245_V_3_fu_736;
reg   [15:0] data_246_V_3_fu_740;
reg   [15:0] data_247_V_3_fu_744;
reg   [15:0] data_248_V_3_fu_748;
reg   [15:0] data_249_V_3_fu_752;
reg   [15:0] data_250_V_3_fu_756;
reg   [15:0] data_251_V_3_fu_760;
reg   [15:0] data_252_V_3_fu_764;
reg   [15:0] data_253_V_3_fu_768;
reg   [15:0] data_254_V_3_fu_772;
reg   [15:0] data_255_V_3_fu_776;
reg   [15:0] data_240_V_4_fu_780;
reg   [15:0] data_241_V_4_fu_784;
reg   [15:0] data_242_V_4_fu_788;
reg   [15:0] data_243_V_4_fu_792;
reg   [15:0] data_244_V_4_fu_796;
reg   [15:0] data_245_V_4_fu_800;
reg   [15:0] data_246_V_4_fu_804;
reg   [15:0] data_247_V_4_fu_808;
reg   [15:0] data_248_V_4_fu_812;
reg   [15:0] data_249_V_4_fu_816;
reg   [15:0] data_250_V_4_fu_820;
reg   [15:0] data_251_V_4_fu_824;
reg   [15:0] data_252_V_4_fu_828;
reg   [15:0] data_253_V_4_fu_832;
reg   [15:0] data_254_V_4_fu_836;
reg   [15:0] data_255_V_4_fu_840;
reg   [15:0] data_240_V_5_fu_844;
reg   [15:0] data_241_V_5_fu_848;
reg   [15:0] data_242_V_5_fu_852;
reg   [15:0] data_243_V_5_fu_856;
reg   [15:0] data_244_V_5_fu_860;
reg   [15:0] data_245_V_5_fu_864;
reg   [15:0] data_246_V_5_fu_868;
reg   [15:0] data_247_V_5_fu_872;
reg   [15:0] data_248_V_5_fu_876;
reg   [15:0] data_249_V_5_fu_880;
reg   [15:0] data_250_V_5_fu_884;
reg   [15:0] data_251_V_5_fu_888;
reg   [15:0] data_252_V_5_fu_892;
reg   [15:0] data_253_V_5_fu_896;
reg   [15:0] data_254_V_5_fu_900;
reg   [15:0] data_255_V_5_fu_904;
reg   [15:0] data_240_V_6_fu_908;
reg   [15:0] data_241_V_6_fu_912;
reg   [15:0] data_242_V_6_fu_916;
reg   [15:0] data_243_V_6_fu_920;
reg   [15:0] data_244_V_6_fu_924;
reg   [15:0] data_245_V_6_fu_928;
reg   [15:0] data_246_V_6_fu_932;
reg   [15:0] data_247_V_6_fu_936;
reg   [15:0] data_248_V_6_fu_940;
reg   [15:0] data_249_V_6_fu_944;
reg   [15:0] data_250_V_6_fu_948;
reg   [15:0] data_251_V_6_fu_952;
reg   [15:0] data_252_V_6_fu_956;
reg   [15:0] data_253_V_6_fu_960;
reg   [15:0] data_254_V_6_fu_964;
reg   [15:0] data_255_V_6_fu_968;
reg   [15:0] data_240_V_7_fu_972;
reg   [15:0] data_241_V_7_fu_976;
reg   [15:0] data_242_V_7_fu_980;
reg   [15:0] data_243_V_7_fu_984;
reg   [15:0] data_244_V_7_fu_988;
reg   [15:0] data_245_V_7_fu_992;
reg   [15:0] data_246_V_7_fu_996;
reg   [15:0] data_247_V_7_fu_1000;
reg   [15:0] data_248_V_7_fu_1004;
reg   [15:0] data_249_V_7_fu_1008;
reg   [15:0] data_250_V_7_fu_1012;
reg   [15:0] data_251_V_7_fu_1016;
reg   [15:0] data_252_V_7_fu_1020;
reg   [15:0] data_253_V_7_fu_1024;
reg   [15:0] data_254_V_7_fu_1028;
reg   [15:0] data_255_V_7_fu_1032;
reg   [15:0] data_240_V_8_fu_1036;
reg   [15:0] data_241_V_8_fu_1040;
reg   [15:0] data_242_V_8_fu_1044;
reg   [15:0] data_243_V_8_fu_1048;
reg   [15:0] data_244_V_8_fu_1052;
reg   [15:0] data_245_V_8_fu_1056;
reg   [15:0] data_246_V_8_fu_1060;
reg   [15:0] data_247_V_8_fu_1064;
reg   [15:0] data_248_V_8_fu_1068;
reg   [15:0] data_249_V_8_fu_1072;
reg   [15:0] data_250_V_8_fu_1076;
reg   [15:0] data_251_V_8_fu_1080;
reg   [15:0] data_252_V_8_fu_1084;
reg   [15:0] data_253_V_8_fu_1088;
reg   [15:0] data_254_V_8_fu_1092;
reg   [15:0] data_255_V_8_fu_1096;
reg   [15:0] data_240_V_9_fu_1100;
reg   [15:0] data_241_V_9_fu_1104;
reg   [15:0] data_242_V_9_fu_1108;
reg   [15:0] data_243_V_9_fu_1112;
reg   [15:0] data_244_V_9_fu_1116;
reg   [15:0] data_245_V_9_fu_1120;
reg   [15:0] data_246_V_9_fu_1124;
reg   [15:0] data_247_V_9_fu_1128;
reg   [15:0] data_248_V_9_fu_1132;
reg   [15:0] data_249_V_9_fu_1136;
reg   [15:0] data_250_V_9_fu_1140;
reg   [15:0] data_251_V_9_fu_1144;
reg   [15:0] data_252_V_9_fu_1148;
reg   [15:0] data_253_V_9_fu_1152;
reg   [15:0] data_254_V_9_fu_1156;
reg   [15:0] data_255_V_9_fu_1160;
reg   [15:0] data_240_V_10_fu_1164;
reg   [15:0] data_241_V_10_fu_1168;
reg   [15:0] data_242_V_10_fu_1172;
reg   [15:0] data_243_V_10_fu_1176;
reg   [15:0] data_244_V_10_fu_1180;
reg   [15:0] data_245_V_10_fu_1184;
reg   [15:0] data_246_V_10_fu_1188;
reg   [15:0] data_247_V_10_fu_1192;
reg   [15:0] data_248_V_10_fu_1196;
reg   [15:0] data_249_V_10_fu_1200;
reg   [15:0] data_250_V_10_fu_1204;
reg   [15:0] data_251_V_10_fu_1208;
reg   [15:0] data_252_V_10_fu_1212;
reg   [15:0] data_253_V_10_fu_1216;
reg   [15:0] data_254_V_10_fu_1220;
reg   [15:0] data_255_V_10_fu_1224;
reg   [15:0] data_240_V_11_fu_1228;
reg   [15:0] data_241_V_11_fu_1232;
reg   [15:0] data_242_V_11_fu_1236;
reg   [15:0] data_243_V_11_fu_1240;
reg   [15:0] data_244_V_11_fu_1244;
reg   [15:0] data_245_V_11_fu_1248;
reg   [15:0] data_246_V_11_fu_1252;
reg   [15:0] data_247_V_11_fu_1256;
reg   [15:0] data_248_V_11_fu_1260;
reg   [15:0] data_249_V_11_fu_1264;
reg   [15:0] data_250_V_11_fu_1268;
reg   [15:0] data_251_V_11_fu_1272;
reg   [15:0] data_252_V_11_fu_1276;
reg   [15:0] data_253_V_11_fu_1280;
reg   [15:0] data_254_V_11_fu_1284;
reg   [15:0] data_255_V_11_fu_1288;
reg   [15:0] data_240_V_12_fu_1292;
reg   [15:0] data_241_V_12_fu_1296;
reg   [15:0] data_242_V_12_fu_1300;
reg   [15:0] data_243_V_12_fu_1304;
reg   [15:0] data_244_V_12_fu_1308;
reg   [15:0] data_245_V_12_fu_1312;
reg   [15:0] data_246_V_12_fu_1316;
reg   [15:0] data_247_V_12_fu_1320;
reg   [15:0] data_248_V_12_fu_1324;
reg   [15:0] data_249_V_12_fu_1328;
reg   [15:0] data_250_V_12_fu_1332;
reg   [15:0] data_251_V_12_fu_1336;
reg   [15:0] data_252_V_12_fu_1340;
reg   [15:0] data_253_V_12_fu_1344;
reg   [15:0] data_254_V_12_fu_1348;
reg   [15:0] data_255_V_12_fu_1352;
reg   [15:0] data_240_V_13_fu_1356;
reg   [15:0] data_241_V_13_fu_1360;
reg   [15:0] data_242_V_13_fu_1364;
reg   [15:0] data_243_V_13_fu_1368;
reg   [15:0] data_244_V_13_fu_1372;
reg   [15:0] data_245_V_13_fu_1376;
reg   [15:0] data_246_V_13_fu_1380;
reg   [15:0] data_247_V_13_fu_1384;
reg   [15:0] data_248_V_13_fu_1388;
reg   [15:0] data_249_V_13_fu_1392;
reg   [15:0] data_250_V_13_fu_1396;
reg   [15:0] data_251_V_13_fu_1400;
reg   [15:0] data_252_V_13_fu_1404;
reg   [15:0] data_253_V_13_fu_1408;
reg   [15:0] data_254_V_13_fu_1412;
reg   [15:0] data_255_V_13_fu_1416;
reg   [15:0] data_240_V_14_fu_1420;
reg   [15:0] data_241_V_14_fu_1424;
reg   [15:0] data_242_V_14_fu_1428;
reg   [15:0] data_243_V_14_fu_1432;
reg   [15:0] data_244_V_14_fu_1436;
reg   [15:0] data_245_V_14_fu_1440;
reg   [15:0] data_246_V_14_fu_1444;
reg   [15:0] data_247_V_14_fu_1448;
reg   [15:0] data_248_V_14_fu_1452;
reg   [15:0] data_249_V_14_fu_1456;
reg   [15:0] data_250_V_14_fu_1460;
reg   [15:0] data_251_V_14_fu_1464;
reg   [15:0] data_252_V_14_fu_1468;
reg   [15:0] data_253_V_14_fu_1472;
reg   [15:0] data_254_V_14_fu_1476;
reg   [15:0] data_255_V_14_fu_1480;
reg   [15:0] data_240_V_15_fu_1484;
reg   [15:0] data_241_V_15_fu_1488;
reg   [15:0] data_242_V_15_fu_1492;
reg   [15:0] data_243_V_15_fu_1496;
reg   [15:0] data_244_V_15_fu_1500;
reg   [15:0] data_245_V_15_fu_1504;
reg   [15:0] data_246_V_15_fu_1508;
reg   [15:0] data_247_V_15_fu_1512;
reg   [15:0] data_248_V_15_fu_1516;
reg   [15:0] data_249_V_15_fu_1520;
reg   [15:0] data_250_V_15_fu_1524;
reg   [15:0] data_251_V_15_fu_1528;
reg   [15:0] data_252_V_15_fu_1532;
reg   [15:0] data_253_V_15_fu_1536;
reg   [15:0] data_254_V_15_fu_1540;
reg   [15:0] data_255_V_15_fu_1544;
wire    io_acc_block_signal_op1134;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_0_V_read(data_240_V_fu_524),
    .data_1_V_read(data_241_V_fu_528),
    .data_2_V_read(data_242_V_fu_532),
    .data_3_V_read(data_243_V_fu_536),
    .data_4_V_read(data_244_V_fu_540),
    .data_5_V_read(data_245_V_fu_544),
    .data_6_V_read(data_246_V_fu_548),
    .data_7_V_read(data_247_V_fu_552),
    .data_8_V_read(data_248_V_fu_556),
    .data_9_V_read(data_249_V_fu_560),
    .data_10_V_read(data_250_V_fu_564),
    .data_11_V_read(data_251_V_fu_568),
    .data_12_V_read(data_252_V_fu_572),
    .data_13_V_read(data_253_V_fu_576),
    .data_14_V_read(data_254_V_fu_580),
    .data_15_V_read(data_255_V_fu_584),
    .data_16_V_read(data_240_V_1_fu_588),
    .data_17_V_read(data_241_V_1_fu_592),
    .data_18_V_read(data_242_V_1_fu_596),
    .data_19_V_read(data_243_V_1_fu_600),
    .data_20_V_read(data_244_V_1_fu_604),
    .data_21_V_read(data_245_V_1_fu_608),
    .data_22_V_read(data_246_V_1_fu_612),
    .data_23_V_read(data_247_V_1_fu_616),
    .data_24_V_read(data_248_V_1_fu_620),
    .data_25_V_read(data_249_V_1_fu_624),
    .data_26_V_read(data_250_V_1_fu_628),
    .data_27_V_read(data_251_V_1_fu_632),
    .data_28_V_read(data_252_V_1_fu_636),
    .data_29_V_read(data_253_V_1_fu_640),
    .data_30_V_read(data_254_V_1_fu_644),
    .data_31_V_read(data_255_V_1_fu_648),
    .data_32_V_read(data_240_V_2_fu_652),
    .data_33_V_read(data_241_V_2_fu_656),
    .data_34_V_read(data_242_V_2_fu_660),
    .data_35_V_read(data_243_V_2_fu_664),
    .data_36_V_read(data_244_V_2_fu_668),
    .data_37_V_read(data_245_V_2_fu_672),
    .data_38_V_read(data_246_V_2_fu_676),
    .data_39_V_read(data_247_V_2_fu_680),
    .data_40_V_read(data_248_V_2_fu_684),
    .data_41_V_read(data_249_V_2_fu_688),
    .data_42_V_read(data_250_V_2_fu_692),
    .data_43_V_read(data_251_V_2_fu_696),
    .data_44_V_read(data_252_V_2_fu_700),
    .data_45_V_read(data_253_V_2_fu_704),
    .data_46_V_read(data_254_V_2_fu_708),
    .data_47_V_read(data_255_V_2_fu_712),
    .data_48_V_read(data_240_V_3_fu_716),
    .data_49_V_read(data_241_V_3_fu_720),
    .data_50_V_read(data_242_V_3_fu_724),
    .data_51_V_read(data_243_V_3_fu_728),
    .data_52_V_read(data_244_V_3_fu_732),
    .data_53_V_read(data_245_V_3_fu_736),
    .data_54_V_read(data_246_V_3_fu_740),
    .data_55_V_read(data_247_V_3_fu_744),
    .data_56_V_read(data_248_V_3_fu_748),
    .data_57_V_read(data_249_V_3_fu_752),
    .data_58_V_read(data_250_V_3_fu_756),
    .data_59_V_read(data_251_V_3_fu_760),
    .data_60_V_read(data_252_V_3_fu_764),
    .data_61_V_read(data_253_V_3_fu_768),
    .data_62_V_read(data_254_V_3_fu_772),
    .data_63_V_read(data_255_V_3_fu_776),
    .data_64_V_read(data_240_V_4_fu_780),
    .data_65_V_read(data_241_V_4_fu_784),
    .data_66_V_read(data_242_V_4_fu_788),
    .data_67_V_read(data_243_V_4_fu_792),
    .data_68_V_read(data_244_V_4_fu_796),
    .data_69_V_read(data_245_V_4_fu_800),
    .data_70_V_read(data_246_V_4_fu_804),
    .data_71_V_read(data_247_V_4_fu_808),
    .data_72_V_read(data_248_V_4_fu_812),
    .data_73_V_read(data_249_V_4_fu_816),
    .data_74_V_read(data_250_V_4_fu_820),
    .data_75_V_read(data_251_V_4_fu_824),
    .data_76_V_read(data_252_V_4_fu_828),
    .data_77_V_read(data_253_V_4_fu_832),
    .data_78_V_read(data_254_V_4_fu_836),
    .data_79_V_read(data_255_V_4_fu_840),
    .data_80_V_read(data_240_V_5_fu_844),
    .data_81_V_read(data_241_V_5_fu_848),
    .data_82_V_read(data_242_V_5_fu_852),
    .data_83_V_read(data_243_V_5_fu_856),
    .data_84_V_read(data_244_V_5_fu_860),
    .data_85_V_read(data_245_V_5_fu_864),
    .data_86_V_read(data_246_V_5_fu_868),
    .data_87_V_read(data_247_V_5_fu_872),
    .data_88_V_read(data_248_V_5_fu_876),
    .data_89_V_read(data_249_V_5_fu_880),
    .data_90_V_read(data_250_V_5_fu_884),
    .data_91_V_read(data_251_V_5_fu_888),
    .data_92_V_read(data_252_V_5_fu_892),
    .data_93_V_read(data_253_V_5_fu_896),
    .data_94_V_read(data_254_V_5_fu_900),
    .data_95_V_read(data_255_V_5_fu_904),
    .data_96_V_read(data_240_V_6_fu_908),
    .data_97_V_read(data_241_V_6_fu_912),
    .data_98_V_read(data_242_V_6_fu_916),
    .data_99_V_read(data_243_V_6_fu_920),
    .data_100_V_read(data_244_V_6_fu_924),
    .data_101_V_read(data_245_V_6_fu_928),
    .data_102_V_read(data_246_V_6_fu_932),
    .data_103_V_read(data_247_V_6_fu_936),
    .data_104_V_read(data_248_V_6_fu_940),
    .data_105_V_read(data_249_V_6_fu_944),
    .data_106_V_read(data_250_V_6_fu_948),
    .data_107_V_read(data_251_V_6_fu_952),
    .data_108_V_read(data_252_V_6_fu_956),
    .data_109_V_read(data_253_V_6_fu_960),
    .data_110_V_read(data_254_V_6_fu_964),
    .data_111_V_read(data_255_V_6_fu_968),
    .data_112_V_read(data_240_V_7_fu_972),
    .data_113_V_read(data_241_V_7_fu_976),
    .data_114_V_read(data_242_V_7_fu_980),
    .data_115_V_read(data_243_V_7_fu_984),
    .data_116_V_read(data_244_V_7_fu_988),
    .data_117_V_read(data_245_V_7_fu_992),
    .data_118_V_read(data_246_V_7_fu_996),
    .data_119_V_read(data_247_V_7_fu_1000),
    .data_120_V_read(data_248_V_7_fu_1004),
    .data_121_V_read(data_249_V_7_fu_1008),
    .data_122_V_read(data_250_V_7_fu_1012),
    .data_123_V_read(data_251_V_7_fu_1016),
    .data_124_V_read(data_252_V_7_fu_1020),
    .data_125_V_read(data_253_V_7_fu_1024),
    .data_126_V_read(data_254_V_7_fu_1028),
    .data_127_V_read(data_255_V_7_fu_1032),
    .data_128_V_read(data_240_V_8_fu_1036),
    .data_129_V_read(data_241_V_8_fu_1040),
    .data_130_V_read(data_242_V_8_fu_1044),
    .data_131_V_read(data_243_V_8_fu_1048),
    .data_132_V_read(data_244_V_8_fu_1052),
    .data_133_V_read(data_245_V_8_fu_1056),
    .data_134_V_read(data_246_V_8_fu_1060),
    .data_135_V_read(data_247_V_8_fu_1064),
    .data_136_V_read(data_248_V_8_fu_1068),
    .data_137_V_read(data_249_V_8_fu_1072),
    .data_138_V_read(data_250_V_8_fu_1076),
    .data_139_V_read(data_251_V_8_fu_1080),
    .data_140_V_read(data_252_V_8_fu_1084),
    .data_141_V_read(data_253_V_8_fu_1088),
    .data_142_V_read(data_254_V_8_fu_1092),
    .data_143_V_read(data_255_V_8_fu_1096),
    .data_144_V_read(data_240_V_9_fu_1100),
    .data_145_V_read(data_241_V_9_fu_1104),
    .data_146_V_read(data_242_V_9_fu_1108),
    .data_147_V_read(data_243_V_9_fu_1112),
    .data_148_V_read(data_244_V_9_fu_1116),
    .data_149_V_read(data_245_V_9_fu_1120),
    .data_150_V_read(data_246_V_9_fu_1124),
    .data_151_V_read(data_247_V_9_fu_1128),
    .data_152_V_read(data_248_V_9_fu_1132),
    .data_153_V_read(data_249_V_9_fu_1136),
    .data_154_V_read(data_250_V_9_fu_1140),
    .data_155_V_read(data_251_V_9_fu_1144),
    .data_156_V_read(data_252_V_9_fu_1148),
    .data_157_V_read(data_253_V_9_fu_1152),
    .data_158_V_read(data_254_V_9_fu_1156),
    .data_159_V_read(data_255_V_9_fu_1160),
    .data_160_V_read(data_240_V_10_fu_1164),
    .data_161_V_read(data_241_V_10_fu_1168),
    .data_162_V_read(data_242_V_10_fu_1172),
    .data_163_V_read(data_243_V_10_fu_1176),
    .data_164_V_read(data_244_V_10_fu_1180),
    .data_165_V_read(data_245_V_10_fu_1184),
    .data_166_V_read(data_246_V_10_fu_1188),
    .data_167_V_read(data_247_V_10_fu_1192),
    .data_168_V_read(data_248_V_10_fu_1196),
    .data_169_V_read(data_249_V_10_fu_1200),
    .data_170_V_read(data_250_V_10_fu_1204),
    .data_171_V_read(data_251_V_10_fu_1208),
    .data_172_V_read(data_252_V_10_fu_1212),
    .data_173_V_read(data_253_V_10_fu_1216),
    .data_174_V_read(data_254_V_10_fu_1220),
    .data_175_V_read(data_255_V_10_fu_1224),
    .data_176_V_read(data_240_V_11_fu_1228),
    .data_177_V_read(data_241_V_11_fu_1232),
    .data_178_V_read(data_242_V_11_fu_1236),
    .data_179_V_read(data_243_V_11_fu_1240),
    .data_180_V_read(data_244_V_11_fu_1244),
    .data_181_V_read(data_245_V_11_fu_1248),
    .data_182_V_read(data_246_V_11_fu_1252),
    .data_183_V_read(data_247_V_11_fu_1256),
    .data_184_V_read(data_248_V_11_fu_1260),
    .data_185_V_read(data_249_V_11_fu_1264),
    .data_186_V_read(data_250_V_11_fu_1268),
    .data_187_V_read(data_251_V_11_fu_1272),
    .data_188_V_read(data_252_V_11_fu_1276),
    .data_189_V_read(data_253_V_11_fu_1280),
    .data_190_V_read(data_254_V_11_fu_1284),
    .data_191_V_read(data_255_V_11_fu_1288),
    .data_192_V_read(data_240_V_12_fu_1292),
    .data_193_V_read(data_241_V_12_fu_1296),
    .data_194_V_read(data_242_V_12_fu_1300),
    .data_195_V_read(data_243_V_12_fu_1304),
    .data_196_V_read(data_244_V_12_fu_1308),
    .data_197_V_read(data_245_V_12_fu_1312),
    .data_198_V_read(data_246_V_12_fu_1316),
    .data_199_V_read(data_247_V_12_fu_1320),
    .data_200_V_read(data_248_V_12_fu_1324),
    .data_201_V_read(data_249_V_12_fu_1328),
    .data_202_V_read(data_250_V_12_fu_1332),
    .data_203_V_read(data_251_V_12_fu_1336),
    .data_204_V_read(data_252_V_12_fu_1340),
    .data_205_V_read(data_253_V_12_fu_1344),
    .data_206_V_read(data_254_V_12_fu_1348),
    .data_207_V_read(data_255_V_12_fu_1352),
    .data_208_V_read(data_240_V_13_fu_1356),
    .data_209_V_read(data_241_V_13_fu_1360),
    .data_210_V_read(data_242_V_13_fu_1364),
    .data_211_V_read(data_243_V_13_fu_1368),
    .data_212_V_read(data_244_V_13_fu_1372),
    .data_213_V_read(data_245_V_13_fu_1376),
    .data_214_V_read(data_246_V_13_fu_1380),
    .data_215_V_read(data_247_V_13_fu_1384),
    .data_216_V_read(data_248_V_13_fu_1388),
    .data_217_V_read(data_249_V_13_fu_1392),
    .data_218_V_read(data_250_V_13_fu_1396),
    .data_219_V_read(data_251_V_13_fu_1400),
    .data_220_V_read(data_252_V_13_fu_1404),
    .data_221_V_read(data_253_V_13_fu_1408),
    .data_222_V_read(data_254_V_13_fu_1412),
    .data_223_V_read(data_255_V_13_fu_1416),
    .data_224_V_read(data_240_V_14_fu_1420),
    .data_225_V_read(data_241_V_14_fu_1424),
    .data_226_V_read(data_242_V_14_fu_1428),
    .data_227_V_read(data_243_V_14_fu_1432),
    .data_228_V_read(data_244_V_14_fu_1436),
    .data_229_V_read(data_245_V_14_fu_1440),
    .data_230_V_read(data_246_V_14_fu_1444),
    .data_231_V_read(data_247_V_14_fu_1448),
    .data_232_V_read(data_248_V_14_fu_1452),
    .data_233_V_read(data_249_V_14_fu_1456),
    .data_234_V_read(data_250_V_14_fu_1460),
    .data_235_V_read(data_251_V_14_fu_1464),
    .data_236_V_read(data_252_V_14_fu_1468),
    .data_237_V_read(data_253_V_14_fu_1472),
    .data_238_V_read(data_254_V_14_fu_1476),
    .data_239_V_read(data_255_V_14_fu_1480),
    .data_240_V_read(data_240_V_15_fu_1484),
    .data_241_V_read(data_241_V_15_fu_1488),
    .data_242_V_read(data_242_V_15_fu_1492),
    .data_243_V_read(data_243_V_15_fu_1496),
    .data_244_V_read(data_244_V_15_fu_1500),
    .data_245_V_read(data_245_V_15_fu_1504),
    .data_246_V_read(data_246_V_15_fu_1508),
    .data_247_V_read(data_247_V_15_fu_1512),
    .data_248_V_read(data_248_V_15_fu_1516),
    .data_249_V_read(data_249_V_15_fu_1520),
    .data_250_V_read(data_250_V_15_fu_1524),
    .data_251_V_read(data_251_V_15_fu_1528),
    .data_252_V_read(data_252_V_15_fu_1532),
    .data_253_V_read(data_253_V_15_fu_1536),
    .data_254_V_read(data_254_V_15_fu_1540),
    .data_255_V_read(data_255_V_15_fu_1544),
    .ap_return_0(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_11),
    .ap_return_12(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_12),
    .ap_return_13(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_13),
    .ap_return_14(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_14),
    .ap_return_15(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_fu_1907_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_in_0_reg_1636 <= i_in_fu_1913_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_1636 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_10_fu_1164 <= data_stream_V_data_0_V_dout;
        data_241_V_10_fu_1168 <= data_stream_V_data_1_V_dout;
        data_242_V_10_fu_1172 <= data_stream_V_data_2_V_dout;
        data_243_V_10_fu_1176 <= data_stream_V_data_3_V_dout;
        data_244_V_10_fu_1180 <= data_stream_V_data_4_V_dout;
        data_245_V_10_fu_1184 <= data_stream_V_data_5_V_dout;
        data_246_V_10_fu_1188 <= data_stream_V_data_6_V_dout;
        data_247_V_10_fu_1192 <= data_stream_V_data_7_V_dout;
        data_248_V_10_fu_1196 <= data_stream_V_data_8_V_dout;
        data_249_V_10_fu_1200 <= data_stream_V_data_9_V_dout;
        data_250_V_10_fu_1204 <= data_stream_V_data_10_V_dout;
        data_251_V_10_fu_1208 <= data_stream_V_data_11_V_dout;
        data_252_V_10_fu_1212 <= data_stream_V_data_12_V_dout;
        data_253_V_10_fu_1216 <= data_stream_V_data_13_V_dout;
        data_254_V_10_fu_1220 <= data_stream_V_data_14_V_dout;
        data_255_V_10_fu_1224 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_11_fu_1228 <= data_stream_V_data_0_V_dout;
        data_241_V_11_fu_1232 <= data_stream_V_data_1_V_dout;
        data_242_V_11_fu_1236 <= data_stream_V_data_2_V_dout;
        data_243_V_11_fu_1240 <= data_stream_V_data_3_V_dout;
        data_244_V_11_fu_1244 <= data_stream_V_data_4_V_dout;
        data_245_V_11_fu_1248 <= data_stream_V_data_5_V_dout;
        data_246_V_11_fu_1252 <= data_stream_V_data_6_V_dout;
        data_247_V_11_fu_1256 <= data_stream_V_data_7_V_dout;
        data_248_V_11_fu_1260 <= data_stream_V_data_8_V_dout;
        data_249_V_11_fu_1264 <= data_stream_V_data_9_V_dout;
        data_250_V_11_fu_1268 <= data_stream_V_data_10_V_dout;
        data_251_V_11_fu_1272 <= data_stream_V_data_11_V_dout;
        data_252_V_11_fu_1276 <= data_stream_V_data_12_V_dout;
        data_253_V_11_fu_1280 <= data_stream_V_data_13_V_dout;
        data_254_V_11_fu_1284 <= data_stream_V_data_14_V_dout;
        data_255_V_11_fu_1288 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_12_fu_1292 <= data_stream_V_data_0_V_dout;
        data_241_V_12_fu_1296 <= data_stream_V_data_1_V_dout;
        data_242_V_12_fu_1300 <= data_stream_V_data_2_V_dout;
        data_243_V_12_fu_1304 <= data_stream_V_data_3_V_dout;
        data_244_V_12_fu_1308 <= data_stream_V_data_4_V_dout;
        data_245_V_12_fu_1312 <= data_stream_V_data_5_V_dout;
        data_246_V_12_fu_1316 <= data_stream_V_data_6_V_dout;
        data_247_V_12_fu_1320 <= data_stream_V_data_7_V_dout;
        data_248_V_12_fu_1324 <= data_stream_V_data_8_V_dout;
        data_249_V_12_fu_1328 <= data_stream_V_data_9_V_dout;
        data_250_V_12_fu_1332 <= data_stream_V_data_10_V_dout;
        data_251_V_12_fu_1336 <= data_stream_V_data_11_V_dout;
        data_252_V_12_fu_1340 <= data_stream_V_data_12_V_dout;
        data_253_V_12_fu_1344 <= data_stream_V_data_13_V_dout;
        data_254_V_12_fu_1348 <= data_stream_V_data_14_V_dout;
        data_255_V_12_fu_1352 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_13_fu_1356 <= data_stream_V_data_0_V_dout;
        data_241_V_13_fu_1360 <= data_stream_V_data_1_V_dout;
        data_242_V_13_fu_1364 <= data_stream_V_data_2_V_dout;
        data_243_V_13_fu_1368 <= data_stream_V_data_3_V_dout;
        data_244_V_13_fu_1372 <= data_stream_V_data_4_V_dout;
        data_245_V_13_fu_1376 <= data_stream_V_data_5_V_dout;
        data_246_V_13_fu_1380 <= data_stream_V_data_6_V_dout;
        data_247_V_13_fu_1384 <= data_stream_V_data_7_V_dout;
        data_248_V_13_fu_1388 <= data_stream_V_data_8_V_dout;
        data_249_V_13_fu_1392 <= data_stream_V_data_9_V_dout;
        data_250_V_13_fu_1396 <= data_stream_V_data_10_V_dout;
        data_251_V_13_fu_1400 <= data_stream_V_data_11_V_dout;
        data_252_V_13_fu_1404 <= data_stream_V_data_12_V_dout;
        data_253_V_13_fu_1408 <= data_stream_V_data_13_V_dout;
        data_254_V_13_fu_1412 <= data_stream_V_data_14_V_dout;
        data_255_V_13_fu_1416 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_14_fu_1420 <= data_stream_V_data_0_V_dout;
        data_241_V_14_fu_1424 <= data_stream_V_data_1_V_dout;
        data_242_V_14_fu_1428 <= data_stream_V_data_2_V_dout;
        data_243_V_14_fu_1432 <= data_stream_V_data_3_V_dout;
        data_244_V_14_fu_1436 <= data_stream_V_data_4_V_dout;
        data_245_V_14_fu_1440 <= data_stream_V_data_5_V_dout;
        data_246_V_14_fu_1444 <= data_stream_V_data_6_V_dout;
        data_247_V_14_fu_1448 <= data_stream_V_data_7_V_dout;
        data_248_V_14_fu_1452 <= data_stream_V_data_8_V_dout;
        data_249_V_14_fu_1456 <= data_stream_V_data_9_V_dout;
        data_250_V_14_fu_1460 <= data_stream_V_data_10_V_dout;
        data_251_V_14_fu_1464 <= data_stream_V_data_11_V_dout;
        data_252_V_14_fu_1468 <= data_stream_V_data_12_V_dout;
        data_253_V_14_fu_1472 <= data_stream_V_data_13_V_dout;
        data_254_V_14_fu_1476 <= data_stream_V_data_14_V_dout;
        data_255_V_14_fu_1480 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_15_fu_1484 <= data_stream_V_data_0_V_dout;
        data_241_V_15_fu_1488 <= data_stream_V_data_1_V_dout;
        data_242_V_15_fu_1492 <= data_stream_V_data_2_V_dout;
        data_243_V_15_fu_1496 <= data_stream_V_data_3_V_dout;
        data_244_V_15_fu_1500 <= data_stream_V_data_4_V_dout;
        data_245_V_15_fu_1504 <= data_stream_V_data_5_V_dout;
        data_246_V_15_fu_1508 <= data_stream_V_data_6_V_dout;
        data_247_V_15_fu_1512 <= data_stream_V_data_7_V_dout;
        data_248_V_15_fu_1516 <= data_stream_V_data_8_V_dout;
        data_249_V_15_fu_1520 <= data_stream_V_data_9_V_dout;
        data_250_V_15_fu_1524 <= data_stream_V_data_10_V_dout;
        data_251_V_15_fu_1528 <= data_stream_V_data_11_V_dout;
        data_252_V_15_fu_1532 <= data_stream_V_data_12_V_dout;
        data_253_V_15_fu_1536 <= data_stream_V_data_13_V_dout;
        data_254_V_15_fu_1540 <= data_stream_V_data_14_V_dout;
        data_255_V_15_fu_1544 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_1_fu_588 <= data_stream_V_data_0_V_dout;
        data_241_V_1_fu_592 <= data_stream_V_data_1_V_dout;
        data_242_V_1_fu_596 <= data_stream_V_data_2_V_dout;
        data_243_V_1_fu_600 <= data_stream_V_data_3_V_dout;
        data_244_V_1_fu_604 <= data_stream_V_data_4_V_dout;
        data_245_V_1_fu_608 <= data_stream_V_data_5_V_dout;
        data_246_V_1_fu_612 <= data_stream_V_data_6_V_dout;
        data_247_V_1_fu_616 <= data_stream_V_data_7_V_dout;
        data_248_V_1_fu_620 <= data_stream_V_data_8_V_dout;
        data_249_V_1_fu_624 <= data_stream_V_data_9_V_dout;
        data_250_V_1_fu_628 <= data_stream_V_data_10_V_dout;
        data_251_V_1_fu_632 <= data_stream_V_data_11_V_dout;
        data_252_V_1_fu_636 <= data_stream_V_data_12_V_dout;
        data_253_V_1_fu_640 <= data_stream_V_data_13_V_dout;
        data_254_V_1_fu_644 <= data_stream_V_data_14_V_dout;
        data_255_V_1_fu_648 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_2_fu_652 <= data_stream_V_data_0_V_dout;
        data_241_V_2_fu_656 <= data_stream_V_data_1_V_dout;
        data_242_V_2_fu_660 <= data_stream_V_data_2_V_dout;
        data_243_V_2_fu_664 <= data_stream_V_data_3_V_dout;
        data_244_V_2_fu_668 <= data_stream_V_data_4_V_dout;
        data_245_V_2_fu_672 <= data_stream_V_data_5_V_dout;
        data_246_V_2_fu_676 <= data_stream_V_data_6_V_dout;
        data_247_V_2_fu_680 <= data_stream_V_data_7_V_dout;
        data_248_V_2_fu_684 <= data_stream_V_data_8_V_dout;
        data_249_V_2_fu_688 <= data_stream_V_data_9_V_dout;
        data_250_V_2_fu_692 <= data_stream_V_data_10_V_dout;
        data_251_V_2_fu_696 <= data_stream_V_data_11_V_dout;
        data_252_V_2_fu_700 <= data_stream_V_data_12_V_dout;
        data_253_V_2_fu_704 <= data_stream_V_data_13_V_dout;
        data_254_V_2_fu_708 <= data_stream_V_data_14_V_dout;
        data_255_V_2_fu_712 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_3_fu_716 <= data_stream_V_data_0_V_dout;
        data_241_V_3_fu_720 <= data_stream_V_data_1_V_dout;
        data_242_V_3_fu_724 <= data_stream_V_data_2_V_dout;
        data_243_V_3_fu_728 <= data_stream_V_data_3_V_dout;
        data_244_V_3_fu_732 <= data_stream_V_data_4_V_dout;
        data_245_V_3_fu_736 <= data_stream_V_data_5_V_dout;
        data_246_V_3_fu_740 <= data_stream_V_data_6_V_dout;
        data_247_V_3_fu_744 <= data_stream_V_data_7_V_dout;
        data_248_V_3_fu_748 <= data_stream_V_data_8_V_dout;
        data_249_V_3_fu_752 <= data_stream_V_data_9_V_dout;
        data_250_V_3_fu_756 <= data_stream_V_data_10_V_dout;
        data_251_V_3_fu_760 <= data_stream_V_data_11_V_dout;
        data_252_V_3_fu_764 <= data_stream_V_data_12_V_dout;
        data_253_V_3_fu_768 <= data_stream_V_data_13_V_dout;
        data_254_V_3_fu_772 <= data_stream_V_data_14_V_dout;
        data_255_V_3_fu_776 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_4_fu_780 <= data_stream_V_data_0_V_dout;
        data_241_V_4_fu_784 <= data_stream_V_data_1_V_dout;
        data_242_V_4_fu_788 <= data_stream_V_data_2_V_dout;
        data_243_V_4_fu_792 <= data_stream_V_data_3_V_dout;
        data_244_V_4_fu_796 <= data_stream_V_data_4_V_dout;
        data_245_V_4_fu_800 <= data_stream_V_data_5_V_dout;
        data_246_V_4_fu_804 <= data_stream_V_data_6_V_dout;
        data_247_V_4_fu_808 <= data_stream_V_data_7_V_dout;
        data_248_V_4_fu_812 <= data_stream_V_data_8_V_dout;
        data_249_V_4_fu_816 <= data_stream_V_data_9_V_dout;
        data_250_V_4_fu_820 <= data_stream_V_data_10_V_dout;
        data_251_V_4_fu_824 <= data_stream_V_data_11_V_dout;
        data_252_V_4_fu_828 <= data_stream_V_data_12_V_dout;
        data_253_V_4_fu_832 <= data_stream_V_data_13_V_dout;
        data_254_V_4_fu_836 <= data_stream_V_data_14_V_dout;
        data_255_V_4_fu_840 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_5_fu_844 <= data_stream_V_data_0_V_dout;
        data_241_V_5_fu_848 <= data_stream_V_data_1_V_dout;
        data_242_V_5_fu_852 <= data_stream_V_data_2_V_dout;
        data_243_V_5_fu_856 <= data_stream_V_data_3_V_dout;
        data_244_V_5_fu_860 <= data_stream_V_data_4_V_dout;
        data_245_V_5_fu_864 <= data_stream_V_data_5_V_dout;
        data_246_V_5_fu_868 <= data_stream_V_data_6_V_dout;
        data_247_V_5_fu_872 <= data_stream_V_data_7_V_dout;
        data_248_V_5_fu_876 <= data_stream_V_data_8_V_dout;
        data_249_V_5_fu_880 <= data_stream_V_data_9_V_dout;
        data_250_V_5_fu_884 <= data_stream_V_data_10_V_dout;
        data_251_V_5_fu_888 <= data_stream_V_data_11_V_dout;
        data_252_V_5_fu_892 <= data_stream_V_data_12_V_dout;
        data_253_V_5_fu_896 <= data_stream_V_data_13_V_dout;
        data_254_V_5_fu_900 <= data_stream_V_data_14_V_dout;
        data_255_V_5_fu_904 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_6_fu_908 <= data_stream_V_data_0_V_dout;
        data_241_V_6_fu_912 <= data_stream_V_data_1_V_dout;
        data_242_V_6_fu_916 <= data_stream_V_data_2_V_dout;
        data_243_V_6_fu_920 <= data_stream_V_data_3_V_dout;
        data_244_V_6_fu_924 <= data_stream_V_data_4_V_dout;
        data_245_V_6_fu_928 <= data_stream_V_data_5_V_dout;
        data_246_V_6_fu_932 <= data_stream_V_data_6_V_dout;
        data_247_V_6_fu_936 <= data_stream_V_data_7_V_dout;
        data_248_V_6_fu_940 <= data_stream_V_data_8_V_dout;
        data_249_V_6_fu_944 <= data_stream_V_data_9_V_dout;
        data_250_V_6_fu_948 <= data_stream_V_data_10_V_dout;
        data_251_V_6_fu_952 <= data_stream_V_data_11_V_dout;
        data_252_V_6_fu_956 <= data_stream_V_data_12_V_dout;
        data_253_V_6_fu_960 <= data_stream_V_data_13_V_dout;
        data_254_V_6_fu_964 <= data_stream_V_data_14_V_dout;
        data_255_V_6_fu_968 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_7_fu_972 <= data_stream_V_data_0_V_dout;
        data_241_V_7_fu_976 <= data_stream_V_data_1_V_dout;
        data_242_V_7_fu_980 <= data_stream_V_data_2_V_dout;
        data_243_V_7_fu_984 <= data_stream_V_data_3_V_dout;
        data_244_V_7_fu_988 <= data_stream_V_data_4_V_dout;
        data_245_V_7_fu_992 <= data_stream_V_data_5_V_dout;
        data_246_V_7_fu_996 <= data_stream_V_data_6_V_dout;
        data_247_V_7_fu_1000 <= data_stream_V_data_7_V_dout;
        data_248_V_7_fu_1004 <= data_stream_V_data_8_V_dout;
        data_249_V_7_fu_1008 <= data_stream_V_data_9_V_dout;
        data_250_V_7_fu_1012 <= data_stream_V_data_10_V_dout;
        data_251_V_7_fu_1016 <= data_stream_V_data_11_V_dout;
        data_252_V_7_fu_1020 <= data_stream_V_data_12_V_dout;
        data_253_V_7_fu_1024 <= data_stream_V_data_13_V_dout;
        data_254_V_7_fu_1028 <= data_stream_V_data_14_V_dout;
        data_255_V_7_fu_1032 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_8_fu_1036 <= data_stream_V_data_0_V_dout;
        data_241_V_8_fu_1040 <= data_stream_V_data_1_V_dout;
        data_242_V_8_fu_1044 <= data_stream_V_data_2_V_dout;
        data_243_V_8_fu_1048 <= data_stream_V_data_3_V_dout;
        data_244_V_8_fu_1052 <= data_stream_V_data_4_V_dout;
        data_245_V_8_fu_1056 <= data_stream_V_data_5_V_dout;
        data_246_V_8_fu_1060 <= data_stream_V_data_6_V_dout;
        data_247_V_8_fu_1064 <= data_stream_V_data_7_V_dout;
        data_248_V_8_fu_1068 <= data_stream_V_data_8_V_dout;
        data_249_V_8_fu_1072 <= data_stream_V_data_9_V_dout;
        data_250_V_8_fu_1076 <= data_stream_V_data_10_V_dout;
        data_251_V_8_fu_1080 <= data_stream_V_data_11_V_dout;
        data_252_V_8_fu_1084 <= data_stream_V_data_12_V_dout;
        data_253_V_8_fu_1088 <= data_stream_V_data_13_V_dout;
        data_254_V_8_fu_1092 <= data_stream_V_data_14_V_dout;
        data_255_V_8_fu_1096 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_9_fu_1100 <= data_stream_V_data_0_V_dout;
        data_241_V_9_fu_1104 <= data_stream_V_data_1_V_dout;
        data_242_V_9_fu_1108 <= data_stream_V_data_2_V_dout;
        data_243_V_9_fu_1112 <= data_stream_V_data_3_V_dout;
        data_244_V_9_fu_1116 <= data_stream_V_data_4_V_dout;
        data_245_V_9_fu_1120 <= data_stream_V_data_5_V_dout;
        data_246_V_9_fu_1124 <= data_stream_V_data_6_V_dout;
        data_247_V_9_fu_1128 <= data_stream_V_data_7_V_dout;
        data_248_V_9_fu_1132 <= data_stream_V_data_8_V_dout;
        data_249_V_9_fu_1136 <= data_stream_V_data_9_V_dout;
        data_250_V_9_fu_1140 <= data_stream_V_data_10_V_dout;
        data_251_V_9_fu_1144 <= data_stream_V_data_11_V_dout;
        data_252_V_9_fu_1148 <= data_stream_V_data_12_V_dout;
        data_253_V_9_fu_1152 <= data_stream_V_data_13_V_dout;
        data_254_V_9_fu_1156 <= data_stream_V_data_14_V_dout;
        data_255_V_9_fu_1160 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_5916 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_240_V_fu_524 <= data_stream_V_data_0_V_dout;
        data_241_V_fu_528 <= data_stream_V_data_1_V_dout;
        data_242_V_fu_532 <= data_stream_V_data_2_V_dout;
        data_243_V_fu_536 <= data_stream_V_data_3_V_dout;
        data_244_V_fu_540 <= data_stream_V_data_4_V_dout;
        data_245_V_fu_544 <= data_stream_V_data_5_V_dout;
        data_246_V_fu_548 <= data_stream_V_data_6_V_dout;
        data_247_V_fu_552 <= data_stream_V_data_7_V_dout;
        data_248_V_fu_556 <= data_stream_V_data_8_V_dout;
        data_249_V_fu_560 <= data_stream_V_data_9_V_dout;
        data_250_V_fu_564 <= data_stream_V_data_10_V_dout;
        data_251_V_fu_568 <= data_stream_V_data_11_V_dout;
        data_252_V_fu_572 <= data_stream_V_data_12_V_dout;
        data_253_V_fu_576 <= data_stream_V_data_13_V_dout;
        data_254_V_fu_580 <= data_stream_V_data_14_V_dout;
        data_255_V_fu_584 <= data_stream_V_data_15_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_fu_1907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln203_reg_5916 <= trunc_ln203_fu_1919_p1;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_1907_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_10_V_blk_n = data_stream_V_data_10_V_empty_n;
    end else begin
        data_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_10_V_read = 1'b1;
    end else begin
        data_stream_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_11_V_blk_n = data_stream_V_data_11_V_empty_n;
    end else begin
        data_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_11_V_read = 1'b1;
    end else begin
        data_stream_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_12_V_blk_n = data_stream_V_data_12_V_empty_n;
    end else begin
        data_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_12_V_read = 1'b1;
    end else begin
        data_stream_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_13_V_blk_n = data_stream_V_data_13_V_empty_n;
    end else begin
        data_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_13_V_read = 1'b1;
    end else begin
        data_stream_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_14_V_blk_n = data_stream_V_data_14_V_empty_n;
    end else begin
        data_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_14_V_read = 1'b1;
    end else begin
        data_stream_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_15_V_blk_n = data_stream_V_data_15_V_empty_n;
    end else begin
        data_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_15_V_read = 1'b1;
    end else begin
        data_stream_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_4_V_blk_n = data_stream_V_data_4_V_empty_n;
    end else begin
        data_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_4_V_read = 1'b1;
    end else begin
        data_stream_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_5_V_blk_n = data_stream_V_data_5_V_empty_n;
    end else begin
        data_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_5_V_read = 1'b1;
    end else begin
        data_stream_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_6_V_blk_n = data_stream_V_data_6_V_empty_n;
    end else begin
        data_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_6_V_read = 1'b1;
    end else begin
        data_stream_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_7_V_blk_n = data_stream_V_data_7_V_empty_n;
    end else begin
        data_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_7_V_read = 1'b1;
    end else begin
        data_stream_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_8_V_blk_n = data_stream_V_data_8_V_empty_n;
    end else begin
        data_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_8_V_read = 1'b1;
    end else begin
        data_stream_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_9_V_blk_n = data_stream_V_data_9_V_empty_n;
    end else begin
        data_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_9_V_read = 1'b1;
    end else begin
        data_stream_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_1907_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_1907_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (io_acc_block_signal_op1134 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op565 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op565 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op565 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_in_fu_1913_p2 = (i_in_0_reg_1636 + 5'd1);

assign icmp_ln41_fu_1907_p2 = ((i_in_0_reg_1636 == 5'd16) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op1134 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign io_acc_block_signal_op565 = (data_stream_V_data_9_V_empty_n & data_stream_V_data_8_V_empty_n & data_stream_V_data_7_V_empty_n & data_stream_V_data_6_V_empty_n & data_stream_V_data_5_V_empty_n & data_stream_V_data_4_V_empty_n & data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_15_V_empty_n & data_stream_V_data_14_V_empty_n & data_stream_V_data_13_V_empty_n & data_stream_V_data_12_V_empty_n & data_stream_V_data_11_V_empty_n & data_stream_V_data_10_V_empty_n & data_stream_V_data_0_V_empty_n);

assign res_stream_V_data_0_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_0;

assign res_stream_V_data_10_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_10;

assign res_stream_V_data_11_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_11;

assign res_stream_V_data_12_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_12;

assign res_stream_V_data_13_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_13;

assign res_stream_V_data_14_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_14;

assign res_stream_V_data_15_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_15;

assign res_stream_V_data_1_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_1;

assign res_stream_V_data_2_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_2;

assign res_stream_V_data_3_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_3;

assign res_stream_V_data_4_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_4;

assign res_stream_V_data_5_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_5;

assign res_stream_V_data_6_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_6;

assign res_stream_V_data_7_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_7;

assign res_stream_V_data_8_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_8;

assign res_stream_V_data_9_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config10_s_fu_1647_ap_return_9;

assign start_out = real_start;

assign trunc_ln203_fu_1919_p1 = i_in_0_reg_1636[3:0];

endmodule //dense_array_array_ap_fixed_16_6_5_3_0_16u_config10_s
