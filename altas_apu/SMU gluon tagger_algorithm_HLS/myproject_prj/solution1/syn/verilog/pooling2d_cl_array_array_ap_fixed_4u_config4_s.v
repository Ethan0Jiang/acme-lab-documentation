// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_4u_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [4:0] pool_table_height23_address0;
reg    pool_table_height23_ce0;
wire   [0:0] pool_table_height23_q0;
wire   [4:0] pool_table_width25_address0;
reg    pool_table_width25_ce0;
wire   [0:0] pool_table_width25_q0;
reg    data_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln142_reg_1143;
reg   [0:0] icmp_ln142_reg_1143_pp0_iter1_reg;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln879_reg_1180;
reg   [0:0] icmp_ln879_reg_1180_pp0_iter3_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [9:0] indvar_flatten_reg_746;
reg   [4:0] h_idx_assign_reg_757;
reg   [4:0] wp_idx_reg_768;
wire   [0:0] icmp_ln142_fu_779_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op95;
wire    data_window_2_V_V_full_n;
reg    data_window_2_V_V_write;
reg   [1:0] or_ln_reg_1172;
wire    data_window_1_V_V_full_n;
reg    data_window_1_V_V_write;
wire    data_window_0_V_V_full_n;
reg    data_window_0_V_V_write;
wire    data_window_3_V_V_full_n;
reg    data_window_3_V_V_write;
wire    data_window_6_V_V_full_n;
reg    data_window_6_V_V_write;
wire    data_window_5_V_V_full_n;
reg    data_window_5_V_V_write;
wire    data_window_4_V_V_full_n;
reg    data_window_4_V_V_write;
wire    data_window_7_V_V_full_n;
reg    data_window_7_V_V_write;
wire    data_window_10_V_V_full_n;
reg    data_window_10_V_V_write;
reg   [3:0] or_ln1_reg_1176;
wire    data_window_9_V_V_full_n;
reg    data_window_9_V_V_write;
wire    data_window_8_V_V_full_n;
reg    data_window_8_V_V_write;
wire    data_window_11_V_V_full_n;
reg    data_window_11_V_V_write;
reg    ap_predicate_op122_write_state4;
wire    data_window_14_V_V_full_n;
reg    data_window_14_V_V_write;
wire    data_window_13_V_V_full_n;
reg    data_window_13_V_V_write;
wire    data_window_12_V_V_full_n;
reg    data_window_12_V_V_write;
wire    data_window_15_V_V_full_n;
reg    data_window_15_V_V_write;
reg    ap_block_state4_pp0_stage0_iter2;
wire   [15:0] data_window_0_V_V_dout;
wire    data_window_0_V_V_empty_n;
reg    data_window_0_V_V_read;
reg   [0:0] icmp_ln879_reg_1180_pp0_iter2_reg;
wire   [15:0] data_window_1_V_V_dout;
wire    data_window_1_V_V_empty_n;
reg    data_window_1_V_V_read;
wire   [15:0] data_window_2_V_V_dout;
wire    data_window_2_V_V_empty_n;
reg    data_window_2_V_V_read;
wire   [15:0] data_window_3_V_V_dout;
wire    data_window_3_V_V_empty_n;
reg    data_window_3_V_V_read;
wire   [15:0] data_window_4_V_V_dout;
wire    data_window_4_V_V_empty_n;
reg    data_window_4_V_V_read;
wire   [15:0] data_window_5_V_V_dout;
wire    data_window_5_V_V_empty_n;
reg    data_window_5_V_V_read;
wire   [15:0] data_window_6_V_V_dout;
wire    data_window_6_V_V_empty_n;
reg    data_window_6_V_V_read;
wire   [15:0] data_window_7_V_V_dout;
wire    data_window_7_V_V_empty_n;
reg    data_window_7_V_V_read;
wire   [15:0] data_window_8_V_V_dout;
wire    data_window_8_V_V_empty_n;
reg    data_window_8_V_V_read;
wire   [15:0] data_window_9_V_V_dout;
wire    data_window_9_V_V_empty_n;
reg    data_window_9_V_V_read;
wire   [15:0] data_window_10_V_V_dout;
wire    data_window_10_V_V_empty_n;
reg    data_window_10_V_V_read;
wire   [15:0] data_window_11_V_V_dout;
wire    data_window_11_V_V_empty_n;
reg    data_window_11_V_V_read;
wire   [15:0] data_window_12_V_V_dout;
wire    data_window_12_V_V_empty_n;
reg    data_window_12_V_V_read;
wire   [15:0] data_window_13_V_V_dout;
wire    data_window_13_V_V_empty_n;
reg    data_window_13_V_V_read;
wire   [15:0] data_window_14_V_V_dout;
wire    data_window_14_V_V_empty_n;
reg    data_window_14_V_V_read;
wire   [15:0] data_window_15_V_V_dout;
wire    data_window_15_V_V_empty_n;
reg    data_window_15_V_V_read;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_enable_reg_pp0_iter3;
wire    io_acc_block_signal_op179;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln142_fu_785_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln81_2_fu_811_p3;
reg   [4:0] select_ln81_2_reg_1152;
wire   [4:0] i_iw_fu_829_p2;
wire   [1:0] or_ln_fu_835_p3;
wire   [3:0] or_ln1_fu_843_p4;
wire   [0:0] icmp_ln879_fu_853_p2;
wire   [15:0] select_ln94_fu_897_p3;
reg   [15:0] select_ln94_reg_1184;
wire   [15:0] select_ln94_24_fu_911_p3;
reg   [15:0] select_ln94_24_reg_1190;
wire   [15:0] select_ln94_26_fu_925_p3;
reg   [15:0] select_ln94_26_reg_1196;
wire   [15:0] select_ln94_27_fu_939_p3;
reg   [15:0] select_ln94_27_reg_1202;
wire   [15:0] select_ln94_29_fu_953_p3;
reg   [15:0] select_ln94_29_reg_1208;
wire   [15:0] select_ln94_30_fu_967_p3;
reg   [15:0] select_ln94_30_reg_1214;
wire   [15:0] select_ln94_32_fu_981_p3;
reg   [15:0] select_ln94_32_reg_1220;
wire   [15:0] select_ln94_33_fu_995_p3;
reg   [15:0] select_ln94_33_reg_1226;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [4:0] ap_phi_mux_h_idx_assign_phi_fu_761_p4;
wire   [63:0] zext_ln81_fu_819_p1;
wire   [63:0] zext_ln89_fu_824_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln143_fu_791_p2;
wire   [4:0] add_ln142_2_fu_805_p2;
wire   [4:0] select_ln81_fu_797_p3;
wire   [0:0] icmp_ln1496_fu_891_p2;
wire   [0:0] icmp_ln1496_24_fu_905_p2;
wire   [0:0] icmp_ln1496_26_fu_919_p2;
wire   [0:0] icmp_ln1496_27_fu_933_p2;
wire   [0:0] icmp_ln1496_29_fu_947_p2;
wire   [0:0] icmp_ln1496_30_fu_961_p2;
wire   [0:0] icmp_ln1496_32_fu_975_p2;
wire   [0:0] icmp_ln1496_33_fu_989_p2;
wire   [0:0] icmp_ln1496_25_fu_1003_p2;
wire   [0:0] icmp_ln1496_28_fu_1014_p2;
wire   [0:0] icmp_ln1496_31_fu_1025_p2;
wire   [0:0] icmp_ln1496_34_fu_1036_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_array_ap_fixed_4u_config4_s_pool_tablebkb #(
    .DataWidth( 1 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
pool_table_height23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool_table_height23_address0),
    .ce0(pool_table_height23_ce0),
    .q0(pool_table_height23_q0)
);

pooling2d_cl_array_array_ap_fixed_4u_config4_s_pool_tablebkb #(
    .DataWidth( 1 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
pool_table_width25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool_table_width25_address0),
    .ce0(pool_table_width25_ce0),
    .q0(pool_table_width25_q0)
);

fifo_w16_d28_A data_window_0_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_0_V_dout),
    .if_full_n(data_window_0_V_V_full_n),
    .if_write(data_window_0_V_V_write),
    .if_dout(data_window_0_V_V_dout),
    .if_empty_n(data_window_0_V_V_empty_n),
    .if_read(data_window_0_V_V_read)
);

fifo_w16_d28_A data_window_1_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_0_V_dout),
    .if_full_n(data_window_1_V_V_full_n),
    .if_write(data_window_1_V_V_write),
    .if_dout(data_window_1_V_V_dout),
    .if_empty_n(data_window_1_V_V_empty_n),
    .if_read(data_window_1_V_V_read)
);

fifo_w16_d28_A data_window_2_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_0_V_dout),
    .if_full_n(data_window_2_V_V_full_n),
    .if_write(data_window_2_V_V_write),
    .if_dout(data_window_2_V_V_dout),
    .if_empty_n(data_window_2_V_V_empty_n),
    .if_read(data_window_2_V_V_read)
);

fifo_w16_d28_A data_window_3_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_0_V_dout),
    .if_full_n(data_window_3_V_V_full_n),
    .if_write(data_window_3_V_V_write),
    .if_dout(data_window_3_V_V_dout),
    .if_empty_n(data_window_3_V_V_empty_n),
    .if_read(data_window_3_V_V_read)
);

fifo_w16_d28_A data_window_4_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_1_V_dout),
    .if_full_n(data_window_4_V_V_full_n),
    .if_write(data_window_4_V_V_write),
    .if_dout(data_window_4_V_V_dout),
    .if_empty_n(data_window_4_V_V_empty_n),
    .if_read(data_window_4_V_V_read)
);

fifo_w16_d28_A data_window_5_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_1_V_dout),
    .if_full_n(data_window_5_V_V_full_n),
    .if_write(data_window_5_V_V_write),
    .if_dout(data_window_5_V_V_dout),
    .if_empty_n(data_window_5_V_V_empty_n),
    .if_read(data_window_5_V_V_read)
);

fifo_w16_d28_A data_window_6_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_1_V_dout),
    .if_full_n(data_window_6_V_V_full_n),
    .if_write(data_window_6_V_V_write),
    .if_dout(data_window_6_V_V_dout),
    .if_empty_n(data_window_6_V_V_empty_n),
    .if_read(data_window_6_V_V_read)
);

fifo_w16_d28_A data_window_7_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_1_V_dout),
    .if_full_n(data_window_7_V_V_full_n),
    .if_write(data_window_7_V_V_write),
    .if_dout(data_window_7_V_V_dout),
    .if_empty_n(data_window_7_V_V_empty_n),
    .if_read(data_window_7_V_V_read)
);

fifo_w16_d28_A data_window_8_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_2_V_dout),
    .if_full_n(data_window_8_V_V_full_n),
    .if_write(data_window_8_V_V_write),
    .if_dout(data_window_8_V_V_dout),
    .if_empty_n(data_window_8_V_V_empty_n),
    .if_read(data_window_8_V_V_read)
);

fifo_w16_d28_A data_window_9_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_2_V_dout),
    .if_full_n(data_window_9_V_V_full_n),
    .if_write(data_window_9_V_V_write),
    .if_dout(data_window_9_V_V_dout),
    .if_empty_n(data_window_9_V_V_empty_n),
    .if_read(data_window_9_V_V_read)
);

fifo_w16_d28_A data_window_10_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_2_V_dout),
    .if_full_n(data_window_10_V_V_full_n),
    .if_write(data_window_10_V_V_write),
    .if_dout(data_window_10_V_V_dout),
    .if_empty_n(data_window_10_V_V_empty_n),
    .if_read(data_window_10_V_V_read)
);

fifo_w16_d28_A data_window_11_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_2_V_dout),
    .if_full_n(data_window_11_V_V_full_n),
    .if_write(data_window_11_V_V_write),
    .if_dout(data_window_11_V_V_dout),
    .if_empty_n(data_window_11_V_V_empty_n),
    .if_read(data_window_11_V_V_read)
);

fifo_w16_d28_A data_window_12_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_3_V_dout),
    .if_full_n(data_window_12_V_V_full_n),
    .if_write(data_window_12_V_V_write),
    .if_dout(data_window_12_V_V_dout),
    .if_empty_n(data_window_12_V_V_empty_n),
    .if_read(data_window_12_V_V_read)
);

fifo_w16_d28_A data_window_13_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_3_V_dout),
    .if_full_n(data_window_13_V_V_full_n),
    .if_write(data_window_13_V_V_write),
    .if_dout(data_window_13_V_V_dout),
    .if_empty_n(data_window_13_V_V_empty_n),
    .if_read(data_window_13_V_V_read)
);

fifo_w16_d28_A data_window_14_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_3_V_dout),
    .if_full_n(data_window_14_V_V_full_n),
    .if_write(data_window_14_V_V_write),
    .if_dout(data_window_14_V_V_dout),
    .if_empty_n(data_window_14_V_V_empty_n),
    .if_read(data_window_14_V_V_read)
);

fifo_w16_d28_A data_window_15_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_V_data_3_V_dout),
    .if_full_n(data_window_15_V_V_full_n),
    .if_write(data_window_15_V_V_write),
    .if_dout(data_window_15_V_V_dout),
    .if_empty_n(data_window_15_V_V_empty_n),
    .if_read(data_window_15_V_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln142_reg_1143 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_idx_assign_reg_757 <= select_ln81_2_reg_1152;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_idx_assign_reg_757 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln142_fu_779_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_746 <= add_ln142_fu_785_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_746 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln142_fu_779_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wp_idx_reg_768 <= i_iw_fu_829_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        wp_idx_reg_768 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln142_reg_1143 <= icmp_ln142_fu_779_p2;
        icmp_ln142_reg_1143_pp0_iter1_reg <= icmp_ln142_reg_1143;
        icmp_ln879_reg_1180 <= icmp_ln879_fu_853_p2;
        or_ln1_reg_1176[1 : 0] <= or_ln1_fu_843_p4[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln879_reg_1180_pp0_iter2_reg <= icmp_ln879_reg_1180;
        icmp_ln879_reg_1180_pp0_iter3_reg <= icmp_ln879_reg_1180_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln142_reg_1143 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln_reg_1172 <= or_ln_fu_835_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln142_fu_779_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln81_2_reg_1152 <= select_ln81_2_fu_811_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        select_ln94_24_reg_1190 <= select_ln94_24_fu_911_p3;
        select_ln94_26_reg_1196 <= select_ln94_26_fu_925_p3;
        select_ln94_27_reg_1202 <= select_ln94_27_fu_939_p3;
        select_ln94_29_reg_1208 <= select_ln94_29_fu_953_p3;
        select_ln94_30_reg_1214 <= select_ln94_30_fu_967_p3;
        select_ln94_32_reg_1220 <= select_ln94_32_fu_981_p3;
        select_ln94_33_reg_1226 <= select_ln94_33_fu_995_p3;
        select_ln94_reg_1184 <= select_ln94_fu_897_p3;
    end
end

always @ (*) begin
    if ((icmp_ln142_fu_779_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln142_reg_1143 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_h_idx_assign_phi_fu_761_p4 = select_ln81_2_reg_1152;
    end else begin
        ap_phi_mux_h_idx_assign_phi_fu_761_p4 = h_idx_assign_reg_757;
    end
end

always @ (*) begin
    if (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_0_V_V_read = 1'b1;
    end else begin
        data_window_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd0))) begin
        data_window_0_V_V_write = 1'b1;
    end else begin
        data_window_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_10_V_V_read = 1'b1;
    end else begin
        data_window_10_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln1_reg_1176 == 4'd10) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_window_10_V_V_write = 1'b1;
    end else begin
        data_window_10_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_11_V_V_read = 1'b1;
    end else begin
        data_window_11_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op122_write_state4 == 1'b1))) begin
        data_window_11_V_V_write = 1'b1;
    end else begin
        data_window_11_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_12_V_V_read = 1'b1;
    end else begin
        data_window_12_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd0))) begin
        data_window_12_V_V_write = 1'b1;
    end else begin
        data_window_12_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_13_V_V_read = 1'b1;
    end else begin
        data_window_13_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd1))) begin
        data_window_13_V_V_write = 1'b1;
    end else begin
        data_window_13_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_14_V_V_read = 1'b1;
    end else begin
        data_window_14_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd2))) begin
        data_window_14_V_V_write = 1'b1;
    end else begin
        data_window_14_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_15_V_V_read = 1'b1;
    end else begin
        data_window_15_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd3))) begin
        data_window_15_V_V_write = 1'b1;
    end else begin
        data_window_15_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_1_V_V_read = 1'b1;
    end else begin
        data_window_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd1))) begin
        data_window_1_V_V_write = 1'b1;
    end else begin
        data_window_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_2_V_V_read = 1'b1;
    end else begin
        data_window_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd2))) begin
        data_window_2_V_V_write = 1'b1;
    end else begin
        data_window_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_3_V_V_read = 1'b1;
    end else begin
        data_window_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd3))) begin
        data_window_3_V_V_write = 1'b1;
    end else begin
        data_window_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_4_V_V_read = 1'b1;
    end else begin
        data_window_4_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd0))) begin
        data_window_4_V_V_write = 1'b1;
    end else begin
        data_window_4_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_5_V_V_read = 1'b1;
    end else begin
        data_window_5_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd1))) begin
        data_window_5_V_V_write = 1'b1;
    end else begin
        data_window_5_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_6_V_V_read = 1'b1;
    end else begin
        data_window_6_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd2))) begin
        data_window_6_V_V_write = 1'b1;
    end else begin
        data_window_6_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_7_V_V_read = 1'b1;
    end else begin
        data_window_7_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln_reg_1172 == 2'd3))) begin
        data_window_7_V_V_write = 1'b1;
    end else begin
        data_window_7_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_8_V_V_read = 1'b1;
    end else begin
        data_window_8_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln1_reg_1176 == 4'd8) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_window_8_V_V_write = 1'b1;
    end else begin
        data_window_8_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1))) begin
        data_window_9_V_V_read = 1'b1;
    end else begin
        data_window_9_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln1_reg_1176 == 4'd9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_window_9_V_V_write = 1'b1;
    end else begin
        data_window_9_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool_table_height23_ce0 = 1'b1;
    end else begin
        pool_table_height23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool_table_width25_ce0 = 1'b1;
    end else begin
        pool_table_width25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln142_fu_779_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln142_fu_779_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln142_2_fu_805_p2 = (ap_phi_mux_h_idx_assign_phi_fu_761_p4 + 5'd1);

assign add_ln142_fu_785_p2 = (indvar_flatten_reg_746 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (io_acc_block_signal_op95 == 1'b0)) | ((data_window_11_V_V_full_n == 1'b0) & (ap_predicate_op122_write_state4 == 1'b1)) | ((data_window_8_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd8)) | ((data_window_9_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd9)) | ((data_window_10_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd10)) | ((data_window_15_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_7_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_3_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_12_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_4_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_0_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_13_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_5_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_1_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_14_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)) | ((data_window_6_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)) | ((data_window_2_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (((data_window_15_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_14_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_13_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_12_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_11_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_10_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_9_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_8_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_7_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_6_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_5_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_4_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_3_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_2_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_1_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_0_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)))) | ((io_acc_block_signal_op179 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (io_acc_block_signal_op95 == 1'b0)) | ((data_window_11_V_V_full_n == 1'b0) & (ap_predicate_op122_write_state4 == 1'b1)) | ((data_window_8_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd8)) | ((data_window_9_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd9)) | ((data_window_10_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd10)) | ((data_window_15_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_7_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_3_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_12_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_4_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_0_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_13_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_5_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_1_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_14_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)) | ((data_window_6_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)) | ((data_window_2_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (((data_window_15_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_14_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_13_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_12_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_11_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_10_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_9_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_8_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_7_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_6_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_5_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_4_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_3_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_2_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_1_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_0_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)))) | ((io_acc_block_signal_op179 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (io_acc_block_signal_op95 == 1'b0)) | ((data_window_11_V_V_full_n == 1'b0) & (ap_predicate_op122_write_state4 == 1'b1)) | ((data_window_8_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd8)) | ((data_window_9_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd9)) | ((data_window_10_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd10)) | ((data_window_15_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_7_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_3_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_12_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_4_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_0_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_13_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_5_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_1_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_14_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)) | ((data_window_6_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)) | ((data_window_2_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (((data_window_15_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_14_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_13_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_12_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_11_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_10_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_9_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_8_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_7_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_6_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_5_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_4_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_3_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_2_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_1_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_0_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)))) | ((io_acc_block_signal_op179 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((icmp_ln142_reg_1143_pp0_iter1_reg == 1'd0) & (io_acc_block_signal_op95 == 1'b0)) | ((data_window_11_V_V_full_n == 1'b0) & (ap_predicate_op122_write_state4 == 1'b1)) | ((data_window_8_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd8)) | ((data_window_9_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd9)) | ((data_window_10_V_V_full_n == 1'b0) & (or_ln1_reg_1176 == 4'd10)) | ((data_window_15_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_7_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_3_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd3)) | ((data_window_12_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_4_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_0_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd0)) | ((data_window_13_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_5_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_1_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd1)) | ((data_window_14_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)) | ((data_window_6_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)) | ((data_window_2_V_V_full_n == 1'b0) & (or_ln_reg_1172 == 2'd2)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = (((data_window_15_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_14_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_13_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_12_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_11_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_10_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_9_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_8_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_7_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_6_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_5_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_4_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_3_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_2_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_1_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)) | ((data_window_0_V_V_empty_n == 1'b0) & (icmp_ln879_reg_1180_pp0_iter2_reg == 1'd1)));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((io_acc_block_signal_op179 == 1'b0) & (icmp_ln879_reg_1180_pp0_iter3_reg == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op122_write_state4 = (~(or_ln1_reg_1176 == 4'd8) & ~(or_ln1_reg_1176 == 4'd9) & ~(or_ln1_reg_1176 == 4'd10));
end

assign ap_ready = internal_ap_ready;

assign i_iw_fu_829_p2 = (select_ln81_fu_797_p3 + 5'd1);

assign icmp_ln142_fu_779_p2 = ((indvar_flatten_reg_746 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln143_fu_791_p2 = ((wp_idx_reg_768 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln1496_24_fu_905_p2 = (($signed(data_window_2_V_V_dout) < $signed(data_window_3_V_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_25_fu_1003_p2 = (($signed(select_ln94_reg_1184) < $signed(select_ln94_24_reg_1190)) ? 1'b1 : 1'b0);

assign icmp_ln1496_26_fu_919_p2 = (($signed(data_window_4_V_V_dout) < $signed(data_window_5_V_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_27_fu_933_p2 = (($signed(data_window_6_V_V_dout) < $signed(data_window_7_V_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_28_fu_1014_p2 = (($signed(select_ln94_26_reg_1196) < $signed(select_ln94_27_reg_1202)) ? 1'b1 : 1'b0);

assign icmp_ln1496_29_fu_947_p2 = (($signed(data_window_8_V_V_dout) < $signed(data_window_9_V_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_30_fu_961_p2 = (($signed(data_window_10_V_V_dout) < $signed(data_window_11_V_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_31_fu_1025_p2 = (($signed(select_ln94_29_reg_1208) < $signed(select_ln94_30_reg_1214)) ? 1'b1 : 1'b0);

assign icmp_ln1496_32_fu_975_p2 = (($signed(data_window_12_V_V_dout) < $signed(data_window_13_V_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_33_fu_989_p2 = (($signed(data_window_14_V_V_dout) < $signed(data_window_15_V_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_34_fu_1036_p2 = (($signed(select_ln94_32_reg_1220) < $signed(select_ln94_33_reg_1226)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_891_p2 = (($signed(data_window_0_V_V_dout) < $signed(data_window_1_V_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_853_p2 = ((or_ln_fu_835_p3 == 2'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op179 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op95 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln1_fu_843_p4 = {{{{2'd2}, {pool_table_height23_q0}}}, {pool_table_width25_q0}};

assign or_ln_fu_835_p3 = {{pool_table_height23_q0}, {pool_table_width25_q0}};

assign pool_table_height23_address0 = zext_ln81_fu_819_p1;

assign pool_table_width25_address0 = zext_ln89_fu_824_p1;

assign res_V_data_0_V_din = ((icmp_ln1496_25_fu_1003_p2[0:0] === 1'b1) ? select_ln94_24_reg_1190 : select_ln94_reg_1184);

assign res_V_data_1_V_din = ((icmp_ln1496_28_fu_1014_p2[0:0] === 1'b1) ? select_ln94_27_reg_1202 : select_ln94_26_reg_1196);

assign res_V_data_2_V_din = ((icmp_ln1496_31_fu_1025_p2[0:0] === 1'b1) ? select_ln94_30_reg_1214 : select_ln94_29_reg_1208);

assign res_V_data_3_V_din = ((icmp_ln1496_34_fu_1036_p2[0:0] === 1'b1) ? select_ln94_33_reg_1226 : select_ln94_32_reg_1220);

assign select_ln81_2_fu_811_p3 = ((icmp_ln143_fu_791_p2[0:0] === 1'b1) ? add_ln142_2_fu_805_p2 : ap_phi_mux_h_idx_assign_phi_fu_761_p4);

assign select_ln81_fu_797_p3 = ((icmp_ln143_fu_791_p2[0:0] === 1'b1) ? 5'd0 : wp_idx_reg_768);

assign select_ln94_24_fu_911_p3 = ((icmp_ln1496_24_fu_905_p2[0:0] === 1'b1) ? data_window_3_V_V_dout : data_window_2_V_V_dout);

assign select_ln94_26_fu_925_p3 = ((icmp_ln1496_26_fu_919_p2[0:0] === 1'b1) ? data_window_5_V_V_dout : data_window_4_V_V_dout);

assign select_ln94_27_fu_939_p3 = ((icmp_ln1496_27_fu_933_p2[0:0] === 1'b1) ? data_window_7_V_V_dout : data_window_6_V_V_dout);

assign select_ln94_29_fu_953_p3 = ((icmp_ln1496_29_fu_947_p2[0:0] === 1'b1) ? data_window_9_V_V_dout : data_window_8_V_V_dout);

assign select_ln94_30_fu_967_p3 = ((icmp_ln1496_30_fu_961_p2[0:0] === 1'b1) ? data_window_11_V_V_dout : data_window_10_V_V_dout);

assign select_ln94_32_fu_981_p3 = ((icmp_ln1496_32_fu_975_p2[0:0] === 1'b1) ? data_window_13_V_V_dout : data_window_12_V_V_dout);

assign select_ln94_33_fu_995_p3 = ((icmp_ln1496_33_fu_989_p2[0:0] === 1'b1) ? data_window_15_V_V_dout : data_window_14_V_V_dout);

assign select_ln94_fu_897_p3 = ((icmp_ln1496_fu_891_p2[0:0] === 1'b1) ? data_window_1_V_V_dout : data_window_0_V_V_dout);

assign start_out = real_start;

assign zext_ln81_fu_819_p1 = select_ln81_2_fu_811_p3;

assign zext_ln89_fu_824_p1 = select_ln81_fu_797_p3;

always @ (posedge ap_clk) begin
    or_ln1_reg_1176[3:2] <= 2'b10;
end

endmodule //pooling2d_cl_array_array_ap_fixed_4u_config4_s
